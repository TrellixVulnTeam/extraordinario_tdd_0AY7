{"ast":null,"code":"function cov_15uiem9wtw() {\n  var path = \"/home/asunawesker/workspace/stuppa/extraordinario_tdd/src/app/shannon-formula/shannon-formula.ts\";\n  var hash = \"700d9e0a562e9d5a744e9e032d14dbc12c654450\";\n  var global = new Function(\"return this\")();\n  var gcv = \"__coverage__\";\n  var coverageData = {\n    path: \"/home/asunawesker/workspace/stuppa/extraordinario_tdd/src/app/shannon-formula/shannon-formula.ts\",\n    statementMap: {\n      \"0\": {\n        start: {\n          line: 3,\n          column: 20\n        },\n        end: {\n          line: 3,\n          column: 30\n        }\n      },\n      \"1\": {\n        start: {\n          line: 4,\n          column: 31\n        },\n        end: {\n          line: 5,\n          column: 76\n        }\n      },\n      \"2\": {\n        start: {\n          line: 5,\n          column: 33\n        },\n        end: {\n          line: 5,\n          column: 71\n        }\n      },\n      \"3\": {\n        start: {\n          line: 6,\n          column: 27\n        },\n        end: {\n          line: 7,\n          column: 70\n        }\n      },\n      \"4\": {\n        start: {\n          line: 7,\n          column: 32\n        },\n        end: {\n          line: 7,\n          column: 66\n        }\n      },\n      \"5\": {\n        start: {\n          line: 8,\n          column: 23\n        },\n        end: {\n          line: 11,\n          column: 10\n        }\n      },\n      \"6\": {\n        start: {\n          line: 8,\n          column: 42\n        },\n        end: {\n          line: 11,\n          column: 10\n        }\n      },\n      \"7\": {\n        start: {\n          line: 12,\n          column: 8\n        },\n        end: {\n          line: 12,\n          column: 45\n        }\n      }\n    },\n    fnMap: {\n      \"0\": {\n        name: \"(anonymous_0)\",\n        decl: {\n          start: {\n            line: 2,\n            column: 4\n          },\n          end: {\n            line: 2,\n            column: 5\n          }\n        },\n        loc: {\n          start: {\n            line: 2,\n            column: 18\n          },\n          end: {\n            line: 13,\n            column: 5\n          }\n        },\n        line: 2\n      },\n      \"1\": {\n        name: \"(anonymous_1)\",\n        decl: {\n          start: {\n            line: 5,\n            column: 20\n          },\n          end: {\n            line: 5,\n            column: 21\n          }\n        },\n        loc: {\n          start: {\n            line: 5,\n            column: 33\n          },\n          end: {\n            line: 5,\n            column: 71\n          }\n        },\n        line: 5\n      },\n      \"2\": {\n        name: \"(anonymous_2)\",\n        decl: {\n          start: {\n            line: 7,\n            column: 20\n          },\n          end: {\n            line: 7,\n            column: 21\n          }\n        },\n        loc: {\n          start: {\n            line: 7,\n            column: 32\n          },\n          end: {\n            line: 7,\n            column: 66\n          }\n        },\n        line: 7\n      },\n      \"3\": {\n        name: \"(anonymous_3)\",\n        decl: {\n          start: {\n            line: 8,\n            column: 23\n          },\n          end: {\n            line: 8,\n            column: 24\n          }\n        },\n        loc: {\n          start: {\n            line: 8,\n            column: 42\n          },\n          end: {\n            line: 11,\n            column: 10\n          }\n        },\n        line: 8\n      }\n    },\n    branchMap: {\n      \"0\": {\n        loc: {\n          start: {\n            line: 5,\n            column: 33\n          },\n          end: {\n            line: 5,\n            column: 71\n          }\n        },\n        type: \"binary-expr\",\n        locations: [{\n          start: {\n            line: 5,\n            column: 34\n          },\n          end: {\n            line: 5,\n            column: 62\n          }\n        }, {\n          start: {\n            line: 5,\n            column: 67\n          },\n          end: {\n            line: 5,\n            column: 71\n          }\n        }],\n        line: 5\n      },\n      \"1\": {\n        loc: {\n          start: {\n            line: 5,\n            column: 45\n          },\n          end: {\n            line: 5,\n            column: 57\n          }\n        },\n        type: \"binary-expr\",\n        locations: [{\n          start: {\n            line: 5,\n            column: 45\n          },\n          end: {\n            line: 5,\n            column: 52\n          }\n        }, {\n          start: {\n            line: 5,\n            column: 56\n          },\n          end: {\n            line: 5,\n            column: 57\n          }\n        }],\n        line: 5\n      }\n    },\n    s: {\n      \"0\": 0,\n      \"1\": 0,\n      \"2\": 0,\n      \"3\": 0,\n      \"4\": 0,\n      \"5\": 0,\n      \"6\": 0,\n      \"7\": 0\n    },\n    f: {\n      \"0\": 0,\n      \"1\": 0,\n      \"2\": 0,\n      \"3\": 0\n    },\n    b: {\n      \"0\": [0, 0],\n      \"1\": [0, 0]\n    },\n    inputSourceMap: {\n      version: 3,\n      file: \"shannon-formula.js\",\n      sourceRoot: \"\",\n      sources: [\"/home/asunawesker/workspace/stuppa/extraordinario_tdd/src/app/shannon-formula/shannon-formula.ts\"],\n      names: [],\n      mappings: \"AAAA,MAAM,OAAO,OAAO;IACT,QAAQ,CAAC,GAAW;QACvB,MAAM,GAAG,GAAG,GAAG,CAAC,MAAM,CAAA;QAEtB,MAAM,cAAc,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;aACjC,MAAM,CAAC,CAAC,IAAS,EAAE,CAAM,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,EAAE,EAAE,CAAC,CAAC;QAE/E,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC;aAC3C,MAAM,CAAC,CAAC,GAAQ,EAAE,CAAM,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,GAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QAErE,MAAM,MAAM,GAAG,CAAC,GAAQ,EAAE,QAAa,EAAE,EAAE,CAAC,GAAG,CAAC,cAAc,CAAC,OAAO,EAAE;YACpE,qBAAqB,EAAE,CAAC;YACxB,qBAAqB,EAAE,CAAC;SAC3B,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;IACzC,CAAC;CACJ\",\n      sourcesContent: [\"export class Formula {\\n    public entropia(str: string) {\\n        const len = str.length\\n       \\n        const frecuencia_str = Array.from(str)\\n            .reduce((freq: any, c: any) => (freq[c] = (freq[c] || 0) + 1) && freq, {});\\n        \\n        const frecuencia = Object.values(frecuencia_str)\\n            .reduce((sum: any, f: any) => sum - f/len * Math.log2(f/len), 0);\\n\\n        const format = (num: any, decimals: any) => num.toLocaleString('en-US', {\\n            minimumFractionDigits: 2,      \\n            maximumFractionDigits: 2,\\n        });\\n\\n        return Number(format(frecuencia, 2));\\n    }\\n}\"]\n    },\n    _coverageSchema: \"1a1c01bbd47fc00a2c39e90264f33305004495a9\",\n    hash: \"700d9e0a562e9d5a744e9e032d14dbc12c654450\"\n  };\n  var coverage = global[gcv] || (global[gcv] = {});\n\n  if (!coverage[path] || coverage[path].hash !== hash) {\n    coverage[path] = coverageData;\n  }\n\n  var actualCoverage = coverage[path];\n  {\n    // @ts-ignore\n    cov_15uiem9wtw = function () {\n      return actualCoverage;\n    };\n  }\n  return actualCoverage;\n}\n\ncov_15uiem9wtw();\nexport class Formula {\n  entropia(str) {\n    cov_15uiem9wtw().f[0]++;\n    const len = (cov_15uiem9wtw().s[0]++, str.length);\n    const frecuencia_str = (cov_15uiem9wtw().s[1]++, Array.from(str).reduce((freq, c) => {\n      cov_15uiem9wtw().f[1]++;\n      cov_15uiem9wtw().s[2]++;\n      return (cov_15uiem9wtw().b[0][0]++, freq[c] = ((cov_15uiem9wtw().b[1][0]++, freq[c]) || (cov_15uiem9wtw().b[1][1]++, 0)) + 1) && (cov_15uiem9wtw().b[0][1]++, freq);\n    }, {}));\n    const frecuencia = (cov_15uiem9wtw().s[3]++, Object.values(frecuencia_str).reduce((sum, f) => {\n      cov_15uiem9wtw().f[2]++;\n      cov_15uiem9wtw().s[4]++;\n      return sum - f / len * Math.log2(f / len);\n    }, 0));\n    cov_15uiem9wtw().s[5]++;\n\n    const format = (num, decimals) => {\n      cov_15uiem9wtw().f[3]++;\n      cov_15uiem9wtw().s[6]++;\n      return num.toLocaleString('en-US', {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n      });\n    };\n\n    cov_15uiem9wtw().s[7]++;\n    return Number(format(frecuencia, 2));\n  }\n\n}","map":{"version":3,"sources":["/home/asunawesker/workspace/stuppa/extraordinario_tdd/src/app/shannon-formula/shannon-formula.ts"],"names":["Formula","entropia","str","len","length","frecuencia_str","Array","from","reduce","freq","c","frecuencia","Object","values","sum","f","Math","log2","format","num","decimals","toLocaleString","minimumFractionDigits","maximumFractionDigits","Number"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeY;;;;;;;;;AAfZ,OAAO,MAAMA,OAAN,CAAc;AACjBC,EAAAA,QAAQ,CAACC,GAAD,EAAM;AAAA;AACV,UAAMC,GAAG,6BAAGD,GAAG,CAACE,MAAP,CAAT;AACA,UAAMC,cAAc,6BAAGC,KAAK,CAACC,IAAN,CAAWL,GAAX,EAClBM,MADkB,CACX,CAACC,IAAD,EAAOC,CAAP,KAAa;AAAA;AAAA;AAAA,0CAACD,IAAI,CAACC,CAAD,CAAJ,GAAU,CAAC,6BAAAD,IAAI,CAACC,CAAD,CAAJ,kCAAW,CAAX,CAAD,IAAiB,CAA5B,kCAAkCD,IAAlC;AAAsC,KADxC,EAC0C,EAD1C,CAAH,CAApB;AAEA,UAAME,UAAU,6BAAGC,MAAM,CAACC,MAAP,CAAcR,cAAd,EACdG,MADc,CACP,CAACM,GAAD,EAAMC,CAAN,KAAY;AAAA;AAAA;AAAA,aAAAD,GAAG,GAAGC,CAAC,GAAGZ,GAAJ,GAAUa,IAAI,CAACC,IAAL,CAAUF,CAAC,GAAGZ,GAAd,CAAhB;AAAkC,KADvC,EACyC,CADzC,CAAH,CAAhB;AAJU;;AAMV,UAAMe,MAAM,GAAG,CAACC,GAAD,EAAMC,QAAN,KAAmB;AAAA;AAAA;AAAA,aAAAD,GAAG,CAACE,cAAJ,CAAmB,OAAnB,EAA4B;AAC1DC,QAAAA,qBAAqB,EAAE,CADmC;AAE1DC,QAAAA,qBAAqB,EAAE;AAFmC,OAA5B;AAGhC,KAHF;;AANU;AAUV,WAAOC,MAAM,CAACN,MAAM,CAACP,UAAD,EAAa,CAAb,CAAP,CAAb;AACH;;AAZgB","sourcesContent":["export class Formula {\n    entropia(str) {\n        const len = str.length;\n        const frecuencia_str = Array.from(str)\n            .reduce((freq, c) => (freq[c] = (freq[c] || 0) + 1) && freq, {});\n        const frecuencia = Object.values(frecuencia_str)\n            .reduce((sum, f) => sum - f / len * Math.log2(f / len), 0);\n        const format = (num, decimals) => num.toLocaleString('en-US', {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2,\n        });\n        return Number(format(frecuencia, 2));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}