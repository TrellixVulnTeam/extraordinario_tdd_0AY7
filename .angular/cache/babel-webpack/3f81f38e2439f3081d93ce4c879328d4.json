{"ast":null,"code":"function cov_tg7prmt03() {\n  var path = \"/home/asunawesker/workspace/stuppa/extra/src/app/shannon-formula/shannon-formula.ts\";\n  var hash = \"987588d0a25e626338a53ff6c2d9617949c5a5c1\";\n  var global = new Function(\"return this\")();\n  var gcv = \"__coverage__\";\n  var coverageData = {\n    path: \"/home/asunawesker/workspace/stuppa/extra/src/app/shannon-formula/shannon-formula.ts\",\n    statementMap: {\n      \"0\": {\n        start: {\n          line: 3,\n          column: 20\n        },\n        end: {\n          line: 3,\n          column: 30\n        }\n      },\n      \"1\": {\n        start: {\n          line: 4,\n          column: 28\n        },\n        end: {\n          line: 5,\n          column: 76\n        }\n      },\n      \"2\": {\n        start: {\n          line: 5,\n          column: 33\n        },\n        end: {\n          line: 5,\n          column: 71\n        }\n      },\n      \"3\": {\n        start: {\n          line: 6,\n          column: 8\n        },\n        end: {\n          line: 7,\n          column: 71\n        }\n      },\n      \"4\": {\n        start: {\n          line: 7,\n          column: 32\n        },\n        end: {\n          line: 7,\n          column: 66\n        }\n      }\n    },\n    fnMap: {\n      \"0\": {\n        name: \"(anonymous_0)\",\n        decl: {\n          start: {\n            line: 2,\n            column: 4\n          },\n          end: {\n            line: 2,\n            column: 5\n          }\n        },\n        loc: {\n          start: {\n            line: 2,\n            column: 17\n          },\n          end: {\n            line: 8,\n            column: 5\n          }\n        },\n        line: 2\n      },\n      \"1\": {\n        name: \"(anonymous_1)\",\n        decl: {\n          start: {\n            line: 5,\n            column: 20\n          },\n          end: {\n            line: 5,\n            column: 21\n          }\n        },\n        loc: {\n          start: {\n            line: 5,\n            column: 33\n          },\n          end: {\n            line: 5,\n            column: 71\n          }\n        },\n        line: 5\n      },\n      \"2\": {\n        name: \"(anonymous_2)\",\n        decl: {\n          start: {\n            line: 7,\n            column: 20\n          },\n          end: {\n            line: 7,\n            column: 21\n          }\n        },\n        loc: {\n          start: {\n            line: 7,\n            column: 32\n          },\n          end: {\n            line: 7,\n            column: 66\n          }\n        },\n        line: 7\n      }\n    },\n    branchMap: {\n      \"0\": {\n        loc: {\n          start: {\n            line: 5,\n            column: 33\n          },\n          end: {\n            line: 5,\n            column: 71\n          }\n        },\n        type: \"binary-expr\",\n        locations: [{\n          start: {\n            line: 5,\n            column: 34\n          },\n          end: {\n            line: 5,\n            column: 62\n          }\n        }, {\n          start: {\n            line: 5,\n            column: 67\n          },\n          end: {\n            line: 5,\n            column: 71\n          }\n        }],\n        line: 5\n      },\n      \"1\": {\n        loc: {\n          start: {\n            line: 5,\n            column: 45\n          },\n          end: {\n            line: 5,\n            column: 57\n          }\n        },\n        type: \"binary-expr\",\n        locations: [{\n          start: {\n            line: 5,\n            column: 45\n          },\n          end: {\n            line: 5,\n            column: 52\n          }\n        }, {\n          start: {\n            line: 5,\n            column: 56\n          },\n          end: {\n            line: 5,\n            column: 57\n          }\n        }],\n        line: 5\n      }\n    },\n    s: {\n      \"0\": 0,\n      \"1\": 0,\n      \"2\": 0,\n      \"3\": 0,\n      \"4\": 0\n    },\n    f: {\n      \"0\": 0,\n      \"1\": 0,\n      \"2\": 0\n    },\n    b: {\n      \"0\": [0, 0],\n      \"1\": [0, 0]\n    },\n    inputSourceMap: {\n      version: 3,\n      file: \"shannon-formula.js\",\n      sourceRoot: \"\",\n      sources: [\"/home/asunawesker/workspace/stuppa/extra/src/app/shannon-formula/shannon-formula.ts\"],\n      names: [],\n      mappings: \"AAAA,MAAM,OAAO,OAAO;IACT,OAAO,CAAC,GAAW;QACtB,MAAM,GAAG,GAAG,GAAG,CAAC,MAAM,CAAA;QAEtB,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;aAChC,MAAM,CAAC,CAAC,IAAS,EAAE,CAAM,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,EAAE,EAAE,CAAC,CAAA;QAE5E,OAAO,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC;aAC9B,MAAM,CAAC,CAAC,GAAQ,EAAE,CAAM,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,GAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAA;IACtE,CAAC;CACJ\",\n      sourcesContent: [\"export class Formula {\\n    public entropy(str: string) {\\n        const len = str.length\\n       \\n        const frequencies = Array.from(str)\\n          .reduce((freq: any, c: any) => (freq[c] = (freq[c] || 0) + 1) && freq, {})\\n       \\n        return Object.values(frequencies)\\n          .reduce((sum: any, f: any) => sum - f/len * Math.log2(f/len), 0)\\n    }\\n}\"]\n    },\n    _coverageSchema: \"1a1c01bbd47fc00a2c39e90264f33305004495a9\",\n    hash: \"987588d0a25e626338a53ff6c2d9617949c5a5c1\"\n  };\n  var coverage = global[gcv] || (global[gcv] = {});\n\n  if (!coverage[path] || coverage[path].hash !== hash) {\n    coverage[path] = coverageData;\n  }\n\n  var actualCoverage = coverage[path];\n  {\n    // @ts-ignore\n    cov_tg7prmt03 = function () {\n      return actualCoverage;\n    };\n  }\n  return actualCoverage;\n}\n\ncov_tg7prmt03();\nexport class Formula {\n  entropy(str) {\n    cov_tg7prmt03().f[0]++;\n    const len = (cov_tg7prmt03().s[0]++, str.length);\n    const frequencies = (cov_tg7prmt03().s[1]++, Array.from(str).reduce((freq, c) => {\n      cov_tg7prmt03().f[1]++;\n      cov_tg7prmt03().s[2]++;\n      return (cov_tg7prmt03().b[0][0]++, freq[c] = ((cov_tg7prmt03().b[1][0]++, freq[c]) || (cov_tg7prmt03().b[1][1]++, 0)) + 1) && (cov_tg7prmt03().b[0][1]++, freq);\n    }, {}));\n    cov_tg7prmt03().s[3]++;\n    return Object.values(frequencies).reduce((sum, f) => {\n      cov_tg7prmt03().f[2]++;\n      cov_tg7prmt03().s[4]++;\n      return sum - f / len * Math.log2(f / len);\n    }, 0);\n  }\n\n}","map":{"version":3,"sources":["/home/asunawesker/workspace/stuppa/extra/src/app/shannon-formula/shannon-formula.ts"],"names":["Formula","entropy","str","len","length","frequencies","Array","from","reduce","freq","c","Object","values","sum","f","Math","log2"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeY;;;;;;;;;AAfZ,OAAO,MAAMA,OAAN,CAAc;AACjBC,EAAAA,OAAO,CAACC,GAAD,EAAM;AAAA;AACT,UAAMC,GAAG,4BAAGD,GAAG,CAACE,MAAP,CAAT;AACA,UAAMC,WAAW,4BAAGC,KAAK,CAACC,IAAN,CAAWL,GAAX,EACfM,MADe,CACR,CAACC,IAAD,EAAOC,CAAP,KAAa;AAAA;AAAA;AAAA,yCAACD,IAAI,CAACC,CAAD,CAAJ,GAAU,CAAC,4BAAAD,IAAI,CAACC,CAAD,CAAJ,iCAAW,CAAX,CAAD,IAAiB,CAA5B,iCAAkCD,IAAlC;AAAsC,KAD3C,EAC6C,EAD7C,CAAH,CAAjB;AAFS;AAIT,WAAOE,MAAM,CAACC,MAAP,CAAcP,WAAd,EACFG,MADE,CACK,CAACK,GAAD,EAAMC,CAAN,KAAY;AAAA;AAAA;AAAA,aAAAD,GAAG,GAAGC,CAAC,GAAGX,GAAJ,GAAUY,IAAI,CAACC,IAAL,CAAUF,CAAC,GAAGX,GAAd,CAAhB;AAAkC,KADnD,EACqD,CADrD,CAAP;AAEH;;AAPgB","sourcesContent":["export class Formula {\n    entropy(str) {\n        const len = str.length;\n        const frequencies = Array.from(str)\n            .reduce((freq, c) => (freq[c] = (freq[c] || 0) + 1) && freq, {});\n        return Object.values(frequencies)\n            .reduce((sum, f) => sum - f / len * Math.log2(f / len), 0);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}